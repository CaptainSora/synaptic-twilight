;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname 10-19) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #t)))
;;
;; **************************
;;   Project Euler
;; **************************
;;

;; ==== Question 10 ========================


;; (sieve-sum num-list) produces the sum of the Sieve of Eratosthenes applied to
;;   a list of numbers.
;; sieve-sum: (listof Nat) -> Nat

(define (sieve-sum num-list)
  (cond [(empty? num-list) 0]
        [else (local [(define new (first num-list))]
                (+ new (sieve-sum
                        (filter (lambda (x)
                                  (not (= 0 (remainder x new))))
                                (rest num-list)))))]))


;; (sum-of-primes ceiling) produces the sum of all primes below the ceiling.
;; sum-of-primes: Nat -> Nat

(define (sum-of-primes ceiling)
  (sieve-sum (rest (build-list ceiling add1))))

;(sum-of-primes 2000000) NOTE THIS TAKES FOREVER PLEASE DO NOT UNCOMMENT


;; ==== Question 11 ========================


(define grid '((08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08)
               (49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00)
               (81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65)
               (52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91)
               (22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80)
               (24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50)
               (32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70)
               (67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21)
               (24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72)
               (21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95)
               (78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92)
               (16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57)
               (86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58)
               (19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40)
               (04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66)
               (88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69)
               (04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36)
               (20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16)
               (20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54)
               (01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48)))


;; (max-product-list check-len num-list acc) finds the list with length
;;   check-len within num-list that has the greatest product, and produces the
;;   product.
;; largest-product-in-series: Nat (listof Nat) Nat -> Nat

(define (max-product-list check-len num-list acc)
  (local [;; (product num-list num-len) produces the product of the first
          ;;   num-len items of num-list.
          ;; product: (listof Nat) Nat -> Nat
          
          (define (product num-list num-len)
            (cond [(= 0 num-len) 1]
                  [else (* (first num-list)
                           (product (rest num-list) (sub1 num-len)))]))]
    
    (cond [(> check-len (length num-list)) acc]
          [else
           (max-product-list check-len (rest num-list)
                             (max acc (product num-list check-len)))])))


;; (check-horizontal check-len grid acc) finds the greatest product of check-len
;;   consecutive numbers in the horizontal direction.
;; check-horizontal: Nat (listof (listof Nat)) Nat -> Nat

(define (check-horizontal check-len grid acc)
  (cond [(empty? grid) acc]
        [else (check-horizontal
               check-len
               (rest grid)
               (max acc (max-product-list check-len (first grid) 0)))]))


;; (invert grid) inverts the grid.
;; invert: (listof (listof Nat)) -> (listof (listof Nat))
;; requires: grid is not empty

(define (invert grid)
  (local [;; (first-row grid g-first g-rest) produces a list with two elements;
          ;;   the first is a list of the first elements of the grid, and the
          ;;   second is the rest of the grid.
          ;; first-row: (listof (listof Nat)) (listof Nat) (listof (listof Nat))
          ;;            -> (list (listof Nat) (listof (listof Nat)))
          
          (define (first-row grid g-first g-rest)
            (cond [(empty? grid) (list g-first g-rest)]
                  [else
                   (first-row (rest grid)
                              (append g-first (list (first (first grid))))
                              (append g-rest (list (rest (first grid)))))]))
          
          (define row (first-row grid empty empty))]
    
    (cond [(empty? (first (second row))) (cons (first row) empty)]
          [else (cons (first row) (invert (second row)))])))


;; (get-diagonals grid) returns the diagonals of the grid in the up-right to
;;   down-left direction, starting from the upper left and ending in the lower
;;   right corners.
;; get-diagonals: (listof (listof Nat)) -> (listof (listof Nat))

(define (get-diagonals grid)
  (local [;; (first-row-to grid new-list rest-list stop) produces a list with
          ;;   two elements; the first is a list of the first elements of the 
          ;;   first stop rows of the grid, and the second is the rest of the
          ;;   grid.
          ;; first-row-to-grid: (listof (listof Nat)) (listof Nat)
          ;;                    (listof (listof Nat)) Nat
          ;;                    -> (list (listof Nat) (listof (listof Nat)))
          
          (define (first-row-to grid new-list rest-list stop)
            (cond [(or (= 0 stop) (empty? grid))
                   (list (reverse new-list)
                         (append (reverse rest-list) grid))]
                  [(empty? (first grid))
                   (first-row-to (rest grid) new-list rest-list (sub1 stop))]
                  [else
                   (first-row-to (rest grid)
                                 (cons (first (first grid)) new-list)
                                 (cons (rest (first grid)) rest-list)
                                 (sub1 stop))]))

          ;; (next-diagonal grid diag-list) produces the next diagonal of the
          ;;   grid.
          ;; next-diagonal: (listof (listof Nat)) (listof (listof Nat))
          ;;                -> (listof (listof Nat))
          
          (define (next-diagonal grid diag-list)
            (cond [(empty? grid) (reverse (rest diag-list))]
                  [(empty? diag-list)
                   (next-diagonal (cons (rest (first grid)) (rest grid))
                                  (cons (list (first (first grid))) diag-list))]
                  [else
                   (local [(define new
                             (first-row-to grid empty empty
                                           (add1 (length (first diag-list)))))]
                     (next-diagonal (second new)
                                    (cons (first new) diag-list)))]))]
    
    (next-diagonal grid empty)))


;; (largest-grid-product grid check-len) returns the greatest product of
;;   check-len adjacent numbers in the orthogonal and diagonal directions.
;; largest-grid-product: (listof (listof Nat)) Nat -> Nat

(define (largest-grid-product grid check-len)
  (local [(define inverted (invert grid))]
    (max (check-horizontal check-len grid 0)
         (check-horizontal check-len inverted 0)
         (check-horizontal check-len (get-diagonals grid) 0)
         (check-horizontal check-len (get-diagonals (reverse inverted)) 0))))

;(largest-grid-product grid 4)


;; ==== Question 12 ========================


;; Find the largest factor, which gives a second factor
;; repeat with the larger one


;; (triangle-number-factors target) produces the first triangle number with more
;;   than target factors.
;; triangle-number-factors: Nat -> Nat
;; requires: target > 0

(define (triangle-number-factors target)
  (local [(define (next-triangle sum i)
            (cond [(> (factors sum) target)
                   sum]
                  [else
                   (next-triangle (+ sum i) (add1 i))]))]
    (next-triangle 1 2)))


;; (factors nat) produces the number of positive factors of the natural number.
;; factors: Nat -> Nat

(define (factors nat)
  (local [(define cap (sqrt nat))
          (define (next-factor current sum)
            (cond [(> current cap) (* 2 sum)]
                  [(zero? (remainder nat current))
                   (next-factor (add1 current) (add1 sum))]
                  [else
                   (next-factor (add1 current) sum)]))])
  (next-factor 1 0))

(triangle-number-factors 5)